{"version":3,"sources":["lib/replace.js","export.js","app.js","layout.js","serviceWorker.js","index.js","router.js"],"names":["replaceUnit","r","k","val","rg","RegExp","replace","replaceInFileArray","jDict","jArr","length","head","tail","t","replaceInFile","Object","keys","toUrl","content","b","Blob","type","window","URL","createObjectURL","Form","U","mapDefault","a","nameDefault","filename","readFile","event","Promise","resolve","reject","file","target","files","fileReader","FileReader","onloadend","data","result","readAsText","App","useState","name","setName","JSON","stringify","dict","setDict","dl","setDl","className","onSubmit","evt","preventDefault","parse","onChange","then","Textarea","value","e","href","download","style","borderTop","borderBottom","boxShadow","title","prefix","menus","Layout","props","header","to","map","menu","i","key","link","Icon","Fragment","children","Boolean","location","hostname","match","history","History","basename","process","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.79b5b18b.chunk.js","sourcesContent":["export const replaceUnit = (r, k, val) => {\n  const rg = new RegExp(`i18n\\\\((\"|'|&quot;|&#x27;)${k}(\"|'|&quot;|&#x27;)\\\\)`, 'g');\n\n  return r.replace(rg, val);\n}\n\nexport const replaceInFileArray = (r, jDict, jArr = []) => {\n  if (jArr.length === 0 ) {\n    return r;\n  }\n\n  const [head, ...tail] = jArr;\n\n  const t = replaceUnit(r, head, jDict[head]);\n\n  return replaceInFileArray(t, jDict, tail);\n}\n\nexport const replaceInFile = (r, jDict = {}) => {\n  const jArr = Object.keys(jDict);\n\n  return replaceInFileArray(r, jDict, jArr);\n}","export const bitToBlob = (x, type) => new Blob([x], {type});\n\nexport const toUrl = content => {\n  const b = bitToBlob(content, 'text/html');\n  //window.URL.revokeObjectURL(url);\n  return window.URL.createObjectURL(b);\n\n  // change filename\n  // https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Disposition\n  // Content-Disposition: inline\n  // Content-Disposition: attachment\n  // Content-Disposition: attachment; filename=\"filename.jpg\"\n}","import React, { useState } from 'react';\n\nimport * as U from '@nexys/uibs4';\nimport { replaceInFile } from './lib/replace';\nimport { toUrl } from './export';\n\nconst { Form } = U;\n\nconst mapDefault = {a: 'replaced a', b: 'replaced b'};\nconst nameDefault = `default-i18n('a') and i18n('b') with\\nbreak line`;\nconst filename = 'en.html';\n\n/**\n * read file content, wrapped in future\n * @param  event (result of input type file)\n * @return Promise(file content)\n */\nconst readFile = async event => new Promise((resolve, reject) => {\n  const file = event.target.files[0];\n\n  const fileReader = new FileReader();\n  fileReader.onloadend = a => {\n    const data = fileReader.result;\n    return resolve(data);\n  };\n    \n  // this function calls `onloadend`\n  fileReader.readAsText(file);\n});\n\nfunction App() {\n  const [ name, setName ] = useState(nameDefault);\n  const [ dict, setDict ] = useState(JSON.stringify(mapDefault));\n  //const [ result, setResult ] = useState('');\n  const [ dl, setDl ] = useState(null);\n\n  const handleSubmit = evt => {\n    evt.preventDefault();\n\n    const jDict = JSON.parse(dict);\n\n    const r = replaceInFile(name, jDict);\n\n    // display button to download\n    setDl(toUrl(r));\n    // displays result\n    //setResult(r);\n  }\n\n  const loadFile = evt => {\n    // here loader if necessary\n\n    readFile(evt).then(data => {\n      setName(data);\n    });\n  }\n\n  const renderLink = () => {\n    if (!dl) {\n      return null;\n    }\n\n    return <a href={dl} download={filename}>Download</a>\n  }\n\n  return (\n    <div className=\"container\">\n      <form onSubmit={handleSubmit}>\n        <div className=\"row\">\n          <div className=\"col-md-6\">\n            {/*<Form.Textarea name=\"name\" value={name} onChange={e => setName(e.value)}/>*/}\n            <input type=\"file\" onChange={a => loadFile(a)}/>\n          </div>\n\n          <div className=\"col-md-6\">\n            <Form.Textarea name=\"dict\" value={dict} onChange={e => setDict(e.value)}/>\n          </div>\n        </div>\n        <input type=\"submit\" className=\"btn btn-primary\"/>\n      </form>\n      {/*renderResult()*/}\n      {renderLink()}\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\n\nimport { Link } from 'react-router-dom';\nimport * as UI from '@nexys/uibs4';\n\nconst style = {\n  borderTop: '1px solid #e5e5e5',\n  borderBottom: '1px solid #e5e5e5',\n  boxShadow: '0 .25rem .75rem rgba(0, 0, 0, .05)'\n}\n\nconst title = 'String Replace';\n\nconst prefix = '';// process.env.PUBLIC_URL || '';\n\nconst menus = [\n];\n\n/*.map(x => {\n  x.link = prefix + x.link;\n\n  return x;\n})*/\n\n\nfunction Layout(props) {\n  const header = (<header>\n    <div style={style} className=\"d-flex flex-column flex-md-row align-items-center p-3 px-md-4 mb-3 bg-white\">\n    <h5 className=\"my-0 mr-md-auto font-weight-normal\"><Link to={prefix + '/'}>{title}</Link></h5>\n    <nav className=\"my-2 my-md-0 mr-md-3\">\n      {menus.map((menu,i) => <Link className=\"p-2 text-dark\" key={i} to={menu.link}>{menu.name}</Link>)}\n      <a href=\"https://github.com/Nexysweb/string-replace\"><UI.Components.Icon name=\"code\"/></a>\n    </nav>\n  </div>\n  </header>);\n\n  return (<React.Fragment>{header}<div className=\"container\">{props.children}</div></React.Fragment>);\n}\nexport default Layout;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { Router } from 'react-router-dom';\nimport * as History from 'history';\n\nimport RouterApp from './router';\nimport * as serviceWorker from './serviceWorker';\n\nconst history = History.createBrowserHistory({\n  basename: process.env.PUBLIC_URL || '',\n});\n\nReactDOM.render(<Router history={history}><RouterApp/></Router>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\n\nimport App from './app';\nimport Layout from './layout';\n\nexport default () => {\n  return <Layout><App/></Layout>;\n}"],"sourceRoot":""}